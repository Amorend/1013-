package com.androlua;

import java.io.IOException;
import java.io.Reader;

public class LuaLexer
{
  public static final int YYEOF = -1;
  public static final int YYINITIAL = 0;
  private static final int[] a = { 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6 };
  private static final char[] b = a("\t\034\001\003\001\002\001\000\001\003\001\001\016\034\004\033\001\003\001+\001\031\001*\001\004\0010\001:\001\035\0012\0013\001/\001\t\0016\001\016\001\r\0011\001\013\t\006\0018\0017\001-\001\027\001,\001\033\001<\004\007\001\b\001\007\t\004\001\n\007\004\001\f\002\004\001\026\001\032\001\030\0019\001\004\001\033\001\036\001\037\001%\001\025\001\020\001#\001\021\001(\001\022\001\004\001 \001!\001\004\001\024\001\023\001'\001\004\001\017\001\"\001&\001$\001\004\001)\001\f\002\004\0014\001;\0015\001.\006\034\001\005\032\034\001\000\001\033\004\004\004\033\001\004\002\033\001\034\007\033\001\004\004\033\001\004\005\033\027\004\001\033\037\004\001\033Ǌ\004\004\033\f\004\016\033\005\004\007\033\001\004\001\033\001\004\021\033p\034\005\004\001\033\002\004\002\033\004\004\b\033\001\004\001\033\003\004\001\033\001\004\001\033\024\004\001\033S\004\001\033\004\001\033\005\034\002\033\004\t\033&\004\002\033\001\004\007\033'\004\007\033\001\004\001\033-\034\001\033\001\034\001\033\002\034\001\033\002\034\001\033\001\034\b\033\033\004\005\033\003\004\r\033\005\034\006\033\001\004\004\033\013\034\005\033+\004\037\034\004\033\002\004\001\034c\004\001\033\001\004\b\034\001\033\006\034\002\004\002\034\001\033\004\034\002\004\n\034\003\004\002\033\001\004\017\033\001\034\001\004\001\034\036\004\033\034\002\033Y\004\013\034\001\004\016\033\n\034!\004\t\034\002\004\004\033\001\004\005\033\026\004\004\034\001\004\t\034\001\004\003\034\001\004\005\034\022\033\031\004\003\034D\033\001\004\001\033\013\0047\033\033\034\001\033\004\0346\004\003\034\001\004\022\034\001\004\007\034\n\004\002\034\002\033\n\034\001\033\007\004\001\033\007\004\001\033\003\034\001\033\b\004\002\033\002\004\002\033\026\004\001\033\007\004\001\033\001\004\003\033\004\004\002\033\001\034\001\004\007\034\002\033\002\034\002\033\003\034\001\004\b\033\001\034\004\033\002\004\001\033\003\004\002\034\002\033\n\034\004\004\007\033\001\004\005\033\003\034\001\033\006\004\004\033\002\004\002\033\026\004\001\033\007\004\001\033\002\004\001\033\002\004\001\033\002\004\002\033\001\034\001\033\005\034\004\033\002\034\002\033\003\034\003\033\001\034\007\033\004\004\001\033\001\004\007\033\f\034\003\004\001\034\013\033\003\034\001\033\t\004\001\033\003\004\001\033\026\004\001\033\007\004\001\033\002\004\001\033\005\004\002\033\001\034\001\004\b\034\001\033\003\034\001\033\003\034\002\033\001\004\017\033\002\004\002\034\002\033\n\034\001\033\001\004\017\033\003\034\001\033\b\004\002\033\002\004\002\033\026\004\001\033\007\004\001\033\002\004\001\033\005\004\002\033\001\034\001\004\007\034\002\033\002\034\002\033\003\034\b\033\002\034\004\033\002\004\001\033\003\004\002\034\002\033\n\034\001\033\001\004\020\033\001\034\001\004\001\033\006\004\003\033\003\004\001\033\004\004\003\033\002\004\001\033\001\004\001\033\002\004\003\033\002\004\003\033\003\004\003\033\f\004\004\033\005\034\003\033\003\034\001\033\004\034\002\033\001\004\006\033\001\034\016\033\n\034\t\033\001\004\007\033\003\034\001\033\b\004\001\033\003\004\001\033\027\004\001\033\n\004\001\033\005\004\003\033\001\004\007\034\001\033\003\034\001\033\004\034\007\033\002\034\001\033\002\004\006\033\002\004\002\034\002\033\n\034\022\033\002\034\001\033\b\004\001\033\003\004\001\033\027\004\001\033\n\004\001\033\005\004\002\033\001\034\001\004\007\034\001\033\003\034\001\033\004\034\007\033\002\034\007\033\001\004\001\033\002\004\002\034\002\033\n\034\001\033\002\004\017\033\002\034\001\033\b\004\001\033\003\004\001\033)\004\002\033\001\004\007\034\001\033\003\034\001\033\004\034\001\004\b\033\001\034\b\033\002\004\002\034\002\033\n\034\n\033\006\004\002\033\002\034\001\033\022\004\003\033\030\004\001\033\t\004\001\033\001\004\002\033\007\004\003\033\001\034\004\033\006\034\001\033\001\034\001\033\b\034\022\033\002\034\r\0330\004\001\034\002\004\007\034\004\033\b\004\b\034\001\033\n\034'\033\002\004\001\033\001\004\002\033\002\004\001\033\001\004\002\033\001\004\006\033\004\004\001\033\007\004\001\033\003\004\001\033\001\004\001\033\001\004\002\033\002\004\001\033\004\004\001\034\002\004\006\034\001\033\002\034\001\004\002\033\005\004\001\033\001\004\001\033\006\034\002\033\n\034\002\033\004\004 \033\001\004\027\033\002\034\006\033\n\034\013\033\001\034\001\033\001\034\001\033\001\034\004\033\002\034\b\004\001\033$\004\004\033\024\034\001\033\002\034\005\004\013\034\001\033$\034\t\033\001\0349\033+\004\024\034\001\004\n\034\006\033\006\004\004\034\004\004\003\034\001\004\003\034\002\004\007\034\003\004\004\034\r\004\f\034\001\004\017\034\002\033&\004\001\033\001\004\005\033\001\004\002\033+\004\001\033ō\004\001\033\004\004\002\033\007\004\001\033\001\004\001\033\004\004\002\033)\004\001\033\004\004\002\033!\004\001\033\004\004\002\033\007\004\001\033\001\004\001\033\004\004\002\033\017\004\001\0339\004\001\033\004\004\002\033C\004\002\033\003\034 \033\020\004\020\033U\004\f\033ɬ\004\002\033\021\004\001\000\032\004\005\033K\004\003\033\003\004\017\033\r\004\001\033\004\004\003\034\013\033\022\004\003\034\013\033\022\004\002\034\f\033\r\004\001\033\003\004\001\033\002\034\f\0334\004 \034\003\033\001\004\003\033\002\004\001\034\002\033\n\034!\033\003\034\002\033\n\034\006\033X\004\b\033)\004\001\034\001\004\005\033F\004\n\033\035\004\003\033\f\034\004\033\f\034\n\033\n\034\036\004\002\033\005\004\013\033,\004\004\033\021\034\007\004\002\034\006\033\n\034&\033\027\004\005\034\004\0335\004\n\034\001\033\035\034\002\033\013\034\006\033\n\034\r\033\001\004X\033\005\034/\004\021\034\007\004\004\033\n\034\021\033\t\034\f\033\003\034\036\004\r\034\002\004\n\034,\004\016\034\f\033$\004\024\034\b\033\n\034\003\033\003\004\n\034$\004R\033\003\034\001\033\025\034\004\004\001\034\004\004\003\034\002\004\t\033À\004'\034\025\033\004\034Ė\004\002\033\006\004\002\033&\004\002\033\006\004\002\033\b\004\001\033\001\004\001\033\001\004\001\033\001\004\001\033\037\004\002\0335\004\001\033\007\004\001\033\001\004\003\033\003\004\001\033\007\004\003\033\004\004\002\033\006\004\004\033\r\004\005\033\003\004\001\033\007\004\003\033\013\000\005\034\030\033\002\000\005\034\001\000\017\033\002\004\023\033\001\004\n\033\001\000\005\034\005\033\006\034\001\033\001\004\r\033\001\004\020\033\r\004\003\033\033\004\025\033\r\034\004\033\001\034\003\033\f\034\021\033\001\004\004\033\001\004\002\033\n\004\001\033\001\004\003\033\005\004\006\033\001\004\001\033\001\004\001\033\001\004\001\033\004\004\001\033\013\004\002\033\004\004\005\033\005\004\004\033\001\004\021\033)\004੷\033/\004\001\033/\004\001\033\004\006\033\004\004\003\034\002\004\f\033&\004\001\033\001\004\005\033\001\004\002\0338\004\007\033\001\004\017\033\001\034\027\004\t\033\007\004\001\033\007\004\001\033\007\004\001\033\007\004\001\033\007\004\001\033\007\004\001\033\007\004\001\033\007\004\001\033 \034/\033\001\004ǐ\033\001\000\004\033\003\004\031\033\t\004\006\034\001\033\005\004\002\033\005\004\004\033V\004\002\033\002\034\002\033\003\004\001\033Z\004\001\033\004\004\005\033)\004\003\033^\004\021\033\033\0045\033\020\004Ȁ\033ᦶ\004J\033凍\0043\033ҍ\004C\033.\004\002\033č\004\003\033\020\004\n\034\002\004\024\033/\004\001\034\004\033\n\034\001\033\031\004\007\033\001\034P\004\002\034%\033\t\004\002\033g\004\002\033\004\004\001\033\004\004\f\033\013\004M\033\n\004\001\034\003\004\001\034\004\004\001\034\027\004\005\034\020\033\001\004\007\0334\004\f\033\002\0342\004\021\034\013\033\n\034\006\033\022\034\006\004\003\033\001\004\004\033\n\034\034\004\b\034\002\033\027\004\r\034\f\033\035\004\003\033\004\034/\004\016\034\016\033\001\004\n\034&\033)\004\016\034\t\033\003\004\001\034\b\004\002\034\002\033\n\034\006\033\027\004\003\033\001\004\001\034\004\0330\004\001\034\001\004\003\034\002\004\002\034\005\004\002\034\001\004\001\034\001\004\030\033\003\004\002\033\013\004\005\034\002\033\003\004\002\034\n\033\006\004\002\033\006\004\002\033\006\004\t\033\007\004\001\033\007\004\033#\004\b\034\001\033\002\034\002\033\n\034\006\033⮤\004\f\033\027\004\004\0331\004℄\033Ů\004\002\033j\004&\033\007\004\f\033\005\004\005\033\001\004\001\034\n\004\001\033\r\004\001\033\005\004\001\033\001\004\001\033\002\004\001\033\002\004\001\033l\004!\033ū\004\022\033@\004\002\0336\004(\033\r\004\003\033\020\034\020\033\007\034\f\033\002\004\030\033\003\004\031\033\001\004\006\033\005\004\001\033\004\002\033\001\034\004\033\001\004\013\033\n\034\007\033\032\004\004\033\001\004\001\033\032\004\013\033Y\004\003\033\006\004\002\033\006\004\002\033\006\004\002\033\003\004\003\033\002\004\003\033\002\004\022\033\003\034\004\033\f\004\001\033\032\004\001\033\023\004\001\033\002\004\001\033\017\004\002\033\016\004\"\033{\004E\0335\004\033\001\034\033\035\004\003\0331\004/\033\037\004\021\033\033\0045\033\036\004\002\033$\004\004\033\b\004\001\033\005\004*\033\004\002\033\n\034͖\033\006\004\002\033\001\004\001\033,\004\001\033\002\004\003\033\001\004\002\033\027\004ª\033\026\004\n\033\032\004F\0338\004\006\033\002\004@\033\001\004\003\034\001\033\002\034\005\033\004\034\004\004\001\033\003\004\001\033\033\004\004\033\003\034\004\033\001\034 \033\035\004\0336\004\n\033\026\004\n\033\023\004\033I\004η\033\003\0345\004\017\034\037\033\n\034\020\033\003\034-\004\013\034\002\033\001\034\022\033\031\004\007\033\n\034\006\033\003\034$\004\016\034\001\033\n\034@\033\003\0340\004\016\034\004\004\013\033\n\034Ҧ\033+\004\r\034\b\033\n\034श\033ͯ\004\033c\004஝\033Я\004㏑\033ȹ\004Ӈ\033E\004\013\033\001\004.\034\020\033\004\034\r\004䁠\033\002\004Ⅳ\033\005\034\003\033\026\034\002\033\007\034\036\033\004\034\033\003\034ƻ\033U\004\001\033G\004\001\033\002\004\002\033\001\004\002\033\002\004\002\033\004\004\001\033\f\004\001\033\001\004\001\033\007\004\001\033A\004\001\033\004\004\002\033\b\004\001\033\007\004\001\033\034\004\001\033\004\004\001\033\005\004\001\033\001\004\003\033\007\004\001\033Ŕ\004\002\033\031\004\001\033\031\004\001\033\037\004\001\033\031\004\001\033\037\004\001\033\031\004\001\033\037\004\001\033\031\004\001\033\037\004\001\033\031\004\001\033\b\004\002\0332\034ᘀ\033\004\004\001\033\033\004\001\033\002\004\001\033\001\004\002\033\001\004\001\033\n\004\001\033\004\004\001\033\001\004\001\033\001\004\006\033\001\004\004\033\001\004\001\033\001\004\001\033\001\004\001\033\003\004\001\033\002\004\001\033\001\004\002\033\001\004\001\033\001\004\001\033\001\004\001\033\001\004\001\033\001\004\001\033\002\004\001\033\001\004\002\033\004\004\001\033\007\004\001\033\004\004\001\033\004\004\001\033\001\004\001\033\n\004\001\033\021\004\005\033\003\004\001\033\005\004\001\033\021\004ᅄ\033ꛗ\004)\033ဵ\004\013\033Þ\004㿢\033Ȟ\004￿\033￿\033￿\033￿\033￿\033￿\033￿\033￿\033￿\033￿\033￿\033׮\033\001\034\036\033`\034\033ð\034￿\033￿\033︒\033");
  private static final int[] c = a();
  private static final int[] d = b();
  private static final int[] e = c();
  private static final String[] f = { "Unknown internal scanner error", "Error: could not match input", "Error: pushback value was too large" };
  private static final int[] g = d();
  public static final int xBLOCK_COMMENT = 12;
  public static final int xBLOCK_STRING = 8;
  public static final int xCOMMENT = 10;
  public static final int xDOUBLE_QUOTED_STRING = 4;
  public static final int xSHEBANG = 2;
  public static final int xSINGLE_QUOTED_STRING = 6;
  private Reader h;
  private int i;
  private int j = 0;
  private char[] k = new char['䀀'];
  private int l;
  private int m;
  private int n;
  private int o;
  private int p;
  private int q;
  private int r;
  private boolean s = true;
  private boolean t;
  private boolean u;
  private int v = 0;
  private int w = 0;
  
  public LuaLexer(Reader paramReader)
  {
    this.h = paramReader;
  }
  
  public LuaLexer(CharSequence paramCharSequence)
  {
    this(new CharSeqReader(paramCharSequence));
  }
  
  private static int a(String paramString, int paramInt, int[] paramArrayOfInt)
  {
    int i3 = paramString.length();
    int i1 = 0;
    if (i1 < i3)
    {
      int i4 = i1 + 1;
      i1 = paramString.charAt(i1);
      int i5 = paramString.charAt(i4);
      for (int i2 = paramInt;; i2 = paramInt)
      {
        paramInt = i2 + 1;
        paramArrayOfInt[i2] = i5;
        i1 -= 1;
        if (i1 <= 0)
        {
          i1 = i4 + 1;
          break;
        }
      }
    }
    return paramInt;
  }
  
  private void a(int paramInt)
  {
    try
    {
      str = f[paramInt];
    }
    catch (ArrayIndexOutOfBoundsException localArrayIndexOutOfBoundsException)
    {
      String str;
      for (;;) {}
    }
    str = f[0];
    throw new Error(str);
  }
  
  private boolean a(char paramChar, int paramInt)
  {
    int i1 = this.l;
    int i2 = this.k.length;
    boolean bool = false;
    if (i1 + paramInt >= i2) {
      return false;
    }
    if (this.k[(this.l + paramInt)] == paramChar) {
      bool = true;
    }
    return bool;
  }
  
  private static char[] a(String paramString)
  {
    char[] arrayOfChar = new char[1114112];
    int i3 = 0;
    int i2 = 0;
    if (i3 < 2884)
    {
      int i5 = i3 + 1;
      i3 = paramString.charAt(i3);
      int i1 = paramString.charAt(i5);
      for (int i4 = i2;; i4 = i2)
      {
        i2 = i4 + 1;
        arrayOfChar[i4] = i1;
        i3 -= 1;
        if (i3 <= 0)
        {
          i3 = i5 + 1;
          break;
        }
      }
    }
    return arrayOfChar;
  }
  
  private static int[] a()
  {
    int[] arrayOfInt = new int['×'];
    a("\001\000\001\001\005\000\001\002\002\003\001\004\001\005\001\006\001\007\001\006\001\b\001\t\007\005\001\n\001\013\001\f\001\r\001\002\001\016\t\005\001\017\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001 \001!\002\"\001\002\001\000\002#\002\006\001\000\001\006\001$\001%\004\005\001&\001'\001(\003\005\001)\001*\001\000\001+\002\000\r\005\001,\001-\001.\001/\0010\0011\0012\0013\0014\001(\001\"\004\000\0015\002\000\002\006\0016\002\000\002\005\0017\002\005\0018\001\020\001\005\0019\001:\0014\003\005\001;\b\005\001\000\0015\001<\001\000\001\006\004\000\002\005\001=\001>\b\005\001?\001@\001A\001\005\001B\002\000\001C\001\006\002\000\004\005\001D\001E\001\005\001F\001\005\001G\001\005\001H\001\000\001\006\002\000\001I\001J\001K\001\005\001L\002\005\003\000\001M\002\005\001N\001\000\001O\001P\001N\002\000\002Q", 0, arrayOfInt);
    return arrayOfInt;
  }
  
  private static int b(String paramString, int paramInt, int[] paramArrayOfInt)
  {
    int i3 = paramString.length();
    int i2 = 0;
    int i1 = paramInt;
    for (paramInt = i2; paramInt < i3; paramInt = i2 + 1)
    {
      i2 = paramInt + 1;
      paramArrayOfInt[i1] = (paramString.charAt(paramInt) << '\020' | paramString.charAt(i2));
      i1 += 1;
    }
    return i1;
  }
  
  private static int[] b()
  {
    int[] arrayOfInt = new int['×'];
    b("\000\000\000=\000z\000·\000ô\000ı\000Ů\000ƫ\000Ǩ\000ƫ\000ȥ\000ɢ\000ʟ\000ƫ\000˜\000̙\000͖\000Γ\000ϐ\000Ѝ\000ъ\000҇\000ӄ\000ԁ\000Ծ\000ջ\000ƫ\000ƫ\000ָ\000ƫ\000׵\000ز\000ٯ\000ڬ\000۩\000ܦ\000ݣ\000ޠ\000ߝ\000ࠚ\000ࡗ\000࢔\000࣑\000ࡗ\000ƫ\000ƫ\000ऎ\000ƫ\000ƫ\000ƫ\000ƫ\000ƫ\000ƫ\000ो\000ƫ\000ঈ\000৅\000ƫ\000ਂ\000ਿ\000੼\000હ\000ƫ\000૶\000ଳ\000୰\000஭\000௪\000ధ\000౤\000ಡ\000ೞ\000ഛ\000൘\000ɢ\000ɢ\000ɢ\000ඕ\000ි\000ฏ\000ɢ\000ƫ\000Ծ\000ƫ\000์\000ຉ\000ໆ\000༃\000ཀ\000ཽ\000ྺ\000࿷\000ဴ\000ၱ\000Ⴎ\000ძ\000ᄨ\000ᅥ\000ᆢ\000ƫ\000ƫ\000ƫ\000ƫ\000ƫ\000ƫ\000ƫ\000ƫ\000ƫ\000ƫ\000ƫ\000ᇟ\000ሜ\000቙\000੼\000ኖ\000ዓ\000௪\000ጐ\000ፍ\000ƫ\000ᎊ\000Ꮗ\000ᐄ\000ᑁ\000ɢ\000ᑾ\000ᒻ\000ɢ\000ɢ\000ᓸ\000ƫ\000ƫ\000ɢ\000ᔵ\000ᕲ\000ᖯ\000ɢ\000ᗬ\000ᘩ\000ᙦ\000ᚣ\000ᛠ\000᜝\000᝚\000ភ\000។\000᠑\000ᡎ\000ᢋ\000ᣈ\000ଳ\000ᤅ\000᥂\000᥿\000ᦼ\000᧹\000ᨶ\000ɢ\000ᩳ\000᪰\000᫭\000ᬪ\000᭧\000ᮤ\000ᯡ\000ᰞ\000ɢ\000ɢ\000ɢ\000ᱛ\000។\000Ი\000᳕\000ᴒ\000ᵏ\000ᶌ\000᷉\000Ḇ\000ṃ\000Ẁ\000ẽ\000ɢ\000ɢ\000Ỻ\000ɢ\000ἷ\000ɢ\000ὴ\000ɢ\000ᾱ\000΅\000‫\000⁨\000ɢ\000ɢ\000ɢ\000₥\000ɢ\000⃢\000℟\000⅜\000↙\000⇖\000ɢ\000∓\000≐\000⊍\000⋊\000ɢ\000ɢ\000⌇\000⍄\000⎁\000⎾\000⏻", 0, arrayOfInt);
    return arrayOfInt;
  }
  
  private static int c(String paramString, int paramInt, int[] paramArrayOfInt)
  {
    int i3 = paramString.length();
    int i1 = 0;
    if (i1 < i3)
    {
      int i4 = i1 + 1;
      i1 = paramString.charAt(i1);
      int i5 = paramString.charAt(i4);
      for (int i2 = paramInt;; i2 = paramInt)
      {
        paramInt = i2 + 1;
        paramArrayOfInt[i2] = (i5 - 1);
        i1 -= 1;
        if (i1 <= 0)
        {
          i1 = i4 + 1;
          break;
        }
      }
    }
    return paramInt;
  }
  
  private static int[] c()
  {
    int[] arrayOfInt = new int['␸'];
    c("\001\b\001\t\001\n\001\013\001\f\001\b\001\r\002\f\001\016\001\f\001\017\001\f\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\030\001\031\001\032\001\033\001\034\001\035\002\b\001\036\001\037\001 \001\f\001!\001\"\001#\001$\001%\001&\002\f\001'\001(\001)\001*\001+\001,\001-\001.\001/\0010\0011\0012\0013\0014\0015\0016\0017\0018\0019\001:\001\002\002\000:\002\031\000\001;@\000\001<\037\000\026\b\001=&\b\016\000\001>.\000\016?\001@.??\000\001\n=\000\001\013=\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\f\f\031\000\001\r\001\000\001A\002\000\001\r\001\000\001B\002\000\001A2\000\001\r\001\000\001A\002\000\001\r\001C\001B\002\000\001A2\000\001D\004\000\001D\001\000\001E=\000\001F2\000\005\f\001\000\003\f\002\000\001\f\001G\005\f\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\005\f\001H\001\f\006\000\001\f\001\000\003\f\001I\b\f\027\000\005\f\001\000\003\f\002\000\004\f\001J\002\f\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\005\f\001K\001\f\006\000\001\f\001\000\005\f\001L\006\f\027\000\005\f\001\000\003\f\002\000\001M\006\f\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\003\f\001N\001O\002\f\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\001\f\001P\002\f\001Q\002\f\006\000\001\f\001\000\f\f)\000\001R\001S<\000\001T3\000\001U\b\000\001V)\000\005\f\001\000\003\f\002\000\005\f\001W\001\f\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\001X\006\f\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\004\f\001Y\002\f\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\013\f\001Z\027\000\005\f\001\000\003\f\002\000\004\f\001[\002\f\006\000\001\f\001\000\001\\\005\f\001]\005\f\027\000\005\f\001\000\003\f\002\000\005\f\001^\001\f\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\004\f\001_\002\f\006\000\001\f\001\000\001`\013\f\027\000\005\f\001\000\003\f\002\000\001a\006\f\006\000\001\f\001\000\n\f\001b\001\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\n\f\001c\001\f>\000\001d(\000\001e<\000\001f\024\000\001g'\000\001h\025\000\001i@\000\001jC\000\001k>\000\001l=\000\001m\001\000\031;\001n\001o\";\032<\001p\002<\001n\037<\026\000\001q\001r3\000\001s<\000\001t4\000\001D\002\000\001u\001\000\001D\002\000\001u4\000\001v\004\000\001v7\000\003w\002\000\001w\004\000\001w\004\000\001w\b\000\002w\003\000\001w\001\000\001w\035\000\001D\004\000\001D>\000\001x>\000\001y\001z0\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\b\f\001{\001|\002\f\027\000\005\f\001\000\003\f\002\000\006\f\001}\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\004\f\001~\007\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\b\f\001\003\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\003\f\001\b\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\b\f\001\003\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\005\f\001\006\f?\000\001<\000\001\024\000\005\f\001\000\003\f\002\000\006\f\001\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\001\f\001\005\f\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\007\f\001\004\f\027\000\005\f\001\000\003\f\002\000\003\f\001\003\f\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\001\006\f\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\003\f\001\b\f\027\000\005\f\001\000\003\f\002\000\005\f\001\001\f\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\b\f\001\003\f\027\000\005\f\001\000\003\f\002\000\005\f\001\001\f\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\004\f\001\007\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\006\f\001\005\f\027\000\005\f\001\000\003\f\002\000\001\f\001\005\f\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\003\f\001\003\f\006\000\001\f\001\000\f\f\024\000\002;\001\000\001;\001\0007;\001\000\002<\001\000\001<\001\0007<\030q\001$q\001\002\000\013\001.\026\000\001,\000\001v\001\000\001A\002\000\001v\004\000\001A2\000\002w\001\001\000\001\001w\001\000\001\002\000\001\004\000\001w\b\000\002w\003\000\001w\001\000\001w\001\000\001%\000\001@\000\001,\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\006\f\001\005\f\027\000\005\f\001\000\003\f\002\000\001\f\001\005\f\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\001\f\001\005\f\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\004\f\001\002\f\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\001\013\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\001 \013\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\001¡\013\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\b\f\001¢\003\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\004\f\001£\007\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\007\f\001¤\004\f\027\000\005\f\001\000\003\f\002\000\003\f\001¥\003\f\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\b\f\001¦\003\f\027\000\005\f\001\000\003\f\002\000\001\f\001§\005\f\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\001\f\001¨\005\f\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\005\f\001©\001\f\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\003\f\001ª\b\f\023\000\027q\001\001«$q\001\002\000:\001\001¬\001­:\026\000\001®\001+\000\002w\001\001u\001\001w\001\000\001\001u\001\000\001\004\000\001w\b\000\002w\003\000\001w\001\000\001w\001\000\001\033\000\003¯\002\000\001¯\004\000\001¯\004\000\001¯\b\000\002¯\003\000\001¯\001\000\001¯(\000\001°@\000\001±+\000\005\f\001\000\003\f\002\000\001²\006\f\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\001³\013\f\027\000\005\f\001\000\003\f\002\000\003\f\001´\003\f\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\006\f\001µ\005\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\002\f\001¶\t\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\003\f\001·\b\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\007\f\001¸\004\f\027\000\005\f\001\000\003\f\002\000\001\f\001¹\005\f\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\b\f\001º\003\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\003\f\001»\b\f\027\000\005\f\001\000\003\f\002\000\003\f\001¼\003\f\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\001\f\001½\005\f\006\000\001\f\001\000\f\f\025\000\001­=\000\001­\n\000\001¾.\000=®\006\000\002¯\001¿\001\000\001\001¯\004\000\001¿\004\000\001¯\b\000\002¯\003\000\001¯\001\000\001¯\001\000\001'\000\001À9\000\001Á1\000\005\f\001\000\003\f\002\000\005\f\001Â\001\f\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\b\f\001Ã\003\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\005\f\001Ä\006\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\003\f\001Å\b\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\n\f\001Æ\001\f\027\000\005\f\001\000\003\f\002\000\003\f\001Ç\003\f\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\005\f\001È\001\f\006\000\001\f\001\000\f\f!\000\001É4\000\002¯\001¿\001u\001\001¯\002\000\001u\001\000\001¿\004\000\001¯\b\000\002¯\003\000\001¯\001\000\001¯\001\000\001(\000\001Ê9\000\001Ë0\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\b\f\001Ì\003\f\027\000\005\f\001\000\003\f\002\000\004\f\001Í\002\f\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\007\f\006\000\001\f\001\000\006\f\001Î\005\f!\000\001B\000\001Ï9\000\001Ð/\000\005\f\001\000\003\f\002\000\005\f\001Ñ\001\f\006\000\001\f\001\000\f\f\027\000\005\f\001\000\003\f\002\000\001\f\001Ò\005\f\006\000\001\f\001\000\f\f\026\000\001ÓK\000\001Ô*\000\001Ó\002\000:Ó\023\000\001Õ=\000\001Ö+\000\001×9\000\001×\002\000:×", 0, arrayOfInt);
    return arrayOfInt;
  }
  
  private static int d(String paramString, int paramInt, int[] paramArrayOfInt)
  {
    int i3 = paramString.length();
    int i1 = 0;
    if (i1 < i3)
    {
      int i4 = i1 + 1;
      i1 = paramString.charAt(i1);
      int i5 = paramString.charAt(i4);
      for (int i2 = paramInt;; i2 = paramInt)
      {
        paramInt = i2 + 1;
        paramArrayOfInt[i2] = i5;
        i1 -= 1;
        if (i1 <= 0)
        {
          i1 = i4 + 1;
          break;
        }
      }
    }
    return paramInt;
  }
  
  private static int[] d()
  {
    int[] arrayOfInt = new int['×'];
    d("\001\000\001\001\005\000\001\t\001\001\001\t\003\001\001\t\f\001\002\t\001\001\001\t\016\001\002\t\001\001\006\t\001\001\001\t\002\001\001\t\003\001\001\000\001\t\003\001\001\000\016\001\001\t\001\000\001\t\002\000\r\001\013\t\004\000\001\001\002\000\002\001\001\t\002\000\b\001\002\t\r\001\001\000\002\001\001\000\001\001\004\000\021\001\002\000\002\001\002\000\f\001\001\000\001\001\002\000\007\001\003\000\004\001\001\000\003\001\002\000\002\001", 0, arrayOfInt);
    return arrayOfInt;
  }
  
  private boolean e()
  {
    boolean bool2 = false;
    this.w = 0;
    boolean bool1 = bool2;
    if (a('[', 0))
    {
      int i2;
      for (int i1 = 0;; i1 = i2)
      {
        i2 = i1 + 1;
        if (!a('=', i2)) {
          break;
        }
      }
      bool1 = bool2;
      if (a('[', i2))
      {
        this.w = i1;
        bool1 = true;
      }
    }
    return bool1;
  }
  
  private int f()
  {
    String str = yytext().toString();
    StringBuilder localStringBuilder = new StringBuilder("]");
    int i1 = 0;
    while (i1 < this.w)
    {
      localStringBuilder.append('=');
      i1 += 1;
    }
    localStringBuilder.append(']');
    i1 = str.indexOf(localStringBuilder.toString());
    if (i1 > 0) {
      return yylength() - i1 - this.w - 2;
    }
    return -1;
  }
  
  private boolean g()
  {
    if (this.n > 0)
    {
      this.o += this.v;
      this.v = 0;
      System.arraycopy(this.k, this.n, this.k, 0, this.o - this.n);
      this.o -= this.n;
      this.m -= this.n;
      this.l -= this.n;
      this.n = 0;
    }
    if (this.m >= this.k.length - this.v)
    {
      char[] arrayOfChar = new char[this.k.length * 2];
      System.arraycopy(this.k, 0, arrayOfChar, 0, this.k.length);
      this.k = arrayOfChar;
      this.o += this.v;
      this.v = 0;
    }
    int i1 = this.k.length - this.o;
    int i2 = this.h.read(this.k, this.o, i1);
    if (i2 == 0) {
      throw new IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (i2 > 0)
    {
      this.o += i2;
      if ((i2 == i1) && (Character.isHighSurrogate(this.k[(this.o - 1)])))
      {
        this.o -= 1;
        this.v = 1;
      }
      return false;
    }
    return true;
  }
  
  public LuaTokenTypes advance()
  {
    int i1 = this.o;
    Object localObject1 = this.k;
    char[] arrayOfChar = b;
    int[] arrayOfInt1 = e;
    int[] arrayOfInt2 = d;
    int[] arrayOfInt3 = g;
    int i4 = this.l;
    this.q += i4 - this.n;
    int i3 = this.n;
    int i6;
    for (int i5 = 0; i3 < i4; i5 = i2)
    {
      i2 = Character.codePointAt((char[])localObject1, i3, i4);
      i6 = Character.charCount(i2);
      if (i2 != 133) {
        switch (i2)
        {
        default: 
          switch (i2)
          {
          default: 
            this.r += i6;
          }
          break;
        }
      }
      for (;;)
      {
        i2 = 0;
        break;
        this.p += 1;
        this.r = 0;
        i2 = 1;
        break;
        if (i5 == 0)
        {
          this.p += 1;
          this.r = 0;
          i2 = i5;
          break;
          this.p += 1;
          this.r = 0;
        }
      }
      i3 += i6;
    }
    i3 = i1;
    Object localObject2 = localObject1;
    int i2 = i4;
    boolean bool;
    if (i5 != 0)
    {
      if (i4 < i1)
      {
        if (localObject1[i4] == '\n') {
          i2 = 1;
        } else {
          i2 = 0;
        }
        i3 = i2;
        i2 = i4;
      }
      else
      {
        if (this.t) {
          i2 = i4;
        }
        do
        {
          for (;;)
          {
            i3 = 0;
            break label372;
            bool = g();
            i3 = this.o;
            i4 = this.l;
            localObject2 = this.k;
            if (!bool) {
              break;
            }
            i1 = i3;
            i2 = i4;
            localObject1 = localObject2;
          }
          i1 = i3;
          i2 = i4;
          localObject1 = localObject2;
        } while (localObject2[i4] != '\n');
        i5 = 1;
        localObject1 = localObject2;
        i2 = i4;
        i1 = i3;
        i3 = i5;
      }
      label372:
      if (i3 != 0) {
        this.p -= 1;
      }
      localObject2 = localObject1;
      i3 = i1;
    }
    this.n = i2;
    this.m = i2;
    this.i = a[this.j];
    if ((arrayOfInt3[this.i] & 0x1) == 1)
    {
      i5 = this.i;
      i1 = i2;
      i2 = i3;
      label437:
      i4 = i1;
    }
    else
    {
      i4 = i2;
      i5 = -1;
      i1 = i2;
      i2 = i3;
    }
    label630:
    label1870:
    for (;;)
    {
      if (i1 < i2)
      {
        i3 = Character.codePointAt((char[])localObject2, i1, i2);
        i1 += Character.charCount(i3);
      }
      else
      {
        if (this.t) {}
        for (;;)
        {
          i3 = -1;
          break label630;
          this.m = i1;
          this.l = i4;
          bool = g();
          i1 = this.m;
          i4 = this.l;
          localObject1 = this.k;
          i2 = this.o;
          if (!bool) {
            break;
          }
          localObject2 = localObject1;
        }
        i3 = Character.codePointAt((char[])localObject1, i1, i2);
        i6 = Character.charCount(i3);
        i1 += i6;
        localObject2 = localObject1;
      }
      i6 = arrayOfInt1[(arrayOfInt2[this.i] + arrayOfChar[i3])];
      if (i6 != -1)
      {
        this.i = i6;
        i6 = arrayOfInt3[this.i];
        if ((i6 & 0x1) != 1) {
          break label1870;
        }
        i5 = this.i;
        if ((i6 & 0x8) == 8) {
          i4 = i1;
        }
      }
      else
      {
        this.l = i4;
        if ((i3 == -1) && (this.n == this.m))
        {
          this.t = true;
          return null;
        }
        if (i5 >= 0) {
          i5 = c[i5];
        }
        i1 = i2;
        localObject1 = localObject2;
        switch (i5)
        {
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        default: 
          a(1);
          i1 = i2;
          localObject1 = localObject2;
          break;
        case 81: 
          return LuaTokenTypes.ENDREGION;
        case 80: 
          return LuaTokenTypes.CONTINUE;
        case 79: 
          return LuaTokenTypes.FUNCTION;
        case 78: 
          return LuaTokenTypes.REGION;
        case 77: 
          return LuaTokenTypes.DEFAULT;
        case 76: 
          return LuaTokenTypes.SWITCH;
        case 75: 
          return LuaTokenTypes.ELSEIF;
        case 74: 
          return LuaTokenTypes.REPEAT;
        case 73: 
          return LuaTokenTypes.RETURN;
        case 72: 
          return LuaTokenTypes.WHILE;
        case 71: 
          return LuaTokenTypes.UNTIL;
        case 70: 
          return LuaTokenTypes.FALSE;
        case 69: 
          return LuaTokenTypes.LOCAL;
        case 68: 
          return LuaTokenTypes.BREAK;
        case 67: 
          i1 = f();
          if (i1 != -1)
          {
            yypushback(i1);
            yybegin(0);
            return LuaTokenTypes.BLOCK_COMMENT;
          }
          yybegin(0);
          return LuaTokenTypes.BLOCK_COMMENT;
        case 66: 
          i1 = f();
          if (i1 != -1)
          {
            yypushback(i1);
            yybegin(0);
            return LuaTokenTypes.LONG_STRING;
          }
          yybegin(0);
          return LuaTokenTypes.BAD_CHARACTER;
        case 65: 
          return LuaTokenTypes.THEN;
        case 64: 
          return LuaTokenTypes.TRUE;
        case 63: 
          return LuaTokenTypes.CASE;
        case 62: 
          return LuaTokenTypes.GOTO;
        case 61: 
          return LuaTokenTypes.ELSE;
        case 60: 
          yybegin(0);
          return LuaTokenTypes.DOC_COMMENT;
        case 59: 
          return LuaTokenTypes.FOR;
        case 58: 
          return LuaTokenTypes.MEAN;
        case 57: 
          return LuaTokenTypes.LEF;
        case 56: 
          return LuaTokenTypes.NIL;
        case 55: 
          return LuaTokenTypes.END;
        case 54: 
          return LuaTokenTypes.ELLIPSIS;
        case 53: 
          yybegin(0);
          return LuaTokenTypes.SHORT_COMMENT;
        case 52: 
          return LuaTokenTypes.AND;
        case 51: 
          return LuaTokenTypes.DOUBLE_COLON;
        case 50: 
          return LuaTokenTypes.DOUBLE_DIV;
        case 49: 
          return LuaTokenTypes.BIT_LTLT;
        case 48: 
          return LuaTokenTypes.LE;
        case 47: 
          return LuaTokenTypes.BIT_RTRT;
        case 46: 
          return LuaTokenTypes.GE;
        case 45: 
          return LuaTokenTypes.NE;
        case 44: 
          yybegin(2);
          return LuaTokenTypes.SHEBANG;
        case 43: 
          return LuaTokenTypes.EQ;
        case 42: 
          yybegin(8);
          yypushback(yylength());
          e();
          i1 = i2;
          localObject1 = localObject2;
          break;
        case 41: 
          return LuaTokenTypes.DO;
        case 40: 
          return LuaTokenTypes.OR;
        case 39: 
          return LuaTokenTypes.IF;
        case 38: 
          return LuaTokenTypes.IN;
        case 37: 
          if (e())
          {
            yypushback(yylength());
            yybegin(12);
            i1 = i2;
            localObject1 = localObject2;
            break;
          }
          yypushback(yylength());
        case 36: 
        case 35: 
          for (;;)
          {
            yybegin(10);
            i1 = i2;
            localObject1 = localObject2;
            break;
            return LuaTokenTypes.CONCAT;
            yypushback(yylength());
          }
        case 34: 
          yybegin(0);
          return LuaTokenTypes.STRING;
        case 33: 
          return LuaTokenTypes.AT;
        case 32: 
          return LuaTokenTypes.BIT_OR;
        case 31: 
          return LuaTokenTypes.BIT_AND;
        case 30: 
          return LuaTokenTypes.EXP;
        case 29: 
          return LuaTokenTypes.COLON;
        case 28: 
          return LuaTokenTypes.SEMI;
        case 27: 
          return LuaTokenTypes.COMMA;
        case 26: 
          return LuaTokenTypes.RCURLY;
        case 25: 
          return LuaTokenTypes.LCURLY;
        case 24: 
          return LuaTokenTypes.RPAREN;
        case 23: 
          return LuaTokenTypes.LPAREN;
        case 22: 
          return LuaTokenTypes.DIV;
        case 21: 
          return LuaTokenTypes.MOD;
        case 20: 
          return LuaTokenTypes.MULT;
        case 19: 
          return LuaTokenTypes.BIT_TILDE;
        case 18: 
          return LuaTokenTypes.LT;
        case 17: 
          return LuaTokenTypes.GT;
        case 16: 
          return LuaTokenTypes.NOT;
        case 15: 
          return LuaTokenTypes.GETN;
        case 14: 
        case 13: 
          for (i1 = 6;; i1 = 4)
          {
            yybegin(i1);
            yypushback(yylength());
            i1 = i2;
            localObject1 = localObject2;
            break;
          }
        case 12: 
          return LuaTokenTypes.RBRACK;
        case 11: 
          return LuaTokenTypes.ASSIGN;
        case 10: 
          return LuaTokenTypes.LBRACK;
        case 9: 
          return LuaTokenTypes.MINUS;
        case 8: 
          return LuaTokenTypes.DOT;
        case 7: 
          return LuaTokenTypes.PLUS;
        case 6: 
          return LuaTokenTypes.NUMBER;
        case 5: 
          return LuaTokenTypes.NAME;
        case 4: 
          return LuaTokenTypes.WHITE_SPACE;
        case 3: 
          return LuaTokenTypes.NEW_LINE;
        case 2: 
          return LuaTokenTypes.BAD_CHARACTER;
        case 1: 
          yybegin(0);
          return LuaTokenTypes.SHEBANG_CONTENT;
        }
      }
      break label437;
    }
  }
  
  public final void yybegin(int paramInt)
  {
    this.j = paramInt;
  }
  
  public int yychar()
  {
    return this.q;
  }
  
  public final char yycharat(int paramInt)
  {
    return this.k[(this.n + paramInt)];
  }
  
  public final void yyclose()
  {
    this.t = true;
    this.o = this.n;
    if (this.h != null) {
      this.h.close();
    }
  }
  
  public int yycolumn()
  {
    return this.r;
  }
  
  public final int yylength()
  {
    return this.l - this.n;
  }
  
  public int yyline()
  {
    return this.p;
  }
  
  public void yypushback(int paramInt)
  {
    if (paramInt > yylength()) {
      a(2);
    }
    this.l -= paramInt;
  }
  
  public final void yyreset(Reader paramReader)
  {
    this.h = paramReader;
    this.s = true;
    this.t = false;
    this.u = false;
    this.n = 0;
    this.o = 0;
    this.l = 0;
    this.m = 0;
    this.v = 0;
    this.r = 0;
    this.q = 0;
    this.p = 0;
    this.j = 0;
    if (this.k.length > 16384) {
      this.k = new char['䀀'];
    }
  }
  
  public final int yystate()
  {
    return this.j;
  }
  
  public final String yytext()
  {
    return new String(this.k, this.n, this.l - this.n);
  }
  
  static class CharSeqReader
    extends Reader
  {
    int a = 0;
    CharSequence b;
    
    CharSeqReader(CharSequence paramCharSequence)
    {
      this.b = paramCharSequence;
    }
    
    public void close()
    {
      this.b = null;
      this.a = 0;
    }
    
    public int read(char[] paramArrayOfChar, int paramInt1, int paramInt2)
    {
      int k = Math.min(this.b.length() - this.a, paramInt2);
      int j = 0;
      paramInt2 = paramInt1;
      paramInt1 = j;
      while (paramInt1 < k)
      {
        try
        {
          CharSequence localCharSequence = this.b;
          j = this.a;
          this.a = (j + 1);
          int i = localCharSequence.charAt(j);
          paramArrayOfChar[paramInt2] = i;
          paramInt2 += 1;
        }
        catch (Exception localException)
        {
          for (;;) {}
        }
        paramInt1 += 1;
      }
      if (k <= 0) {
        return -1;
      }
      return k;
    }
  }
}


/* Location:              C:\Users\12724\Desktop\classes-dex2jar.jar!\com\androlua\LuaLexer.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       0.7.1
 */